{"version":3,"sources":["components/NavBar.js","components/Course.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","Typography","variant","color","Course","props","console","log","course","Card","CardMedia","style","height","paddingTop","title","fields","CardContent","gutterBottom","component","description","CardActions","Button","size","href","url","target","client","contentful","space","accessToken","CoursesList","state","courses","searchString","getCourses","getEntries","content_type","query","then","response","setState","items","catch","error","onSearchInputChange","event","value","this","TextField","padding","id","placeholder","margin","onChange","Grid","container","spacing","map","currentCourse","item","xs","sm","lg","xl","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2RAiBeA,EAbA,WACX,OACI,6BACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,sB,uEC0BDC,EA5BA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,6BACMA,EAAMG,OACJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,OAAQ,EAAGC,WAAY,MAE1CC,MAAOT,EAAMG,OAAOO,OAAOD,QAE3B,kBAACE,EAAA,EAAD,KACA,kBAACf,EAAA,EAAD,CAAYgB,cAAY,EAACf,QAAQ,WAAWgB,UAAU,MACjDb,EAAMG,OAAOO,OAAOD,OAEzB,kBAACb,EAAA,EAAD,CAAYiB,UAAU,KACjBb,EAAMG,OAAOO,OAAOI,cAGzB,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQnB,MAAM,UAAUoB,KAAMlB,EAAMG,OAAOO,OAAOS,IAAKC,OAAO,UAA3E,gBAKJ,OCvBVC,EAASC,IAAwB,CACnCC,MAHa,eAIbC,YAHiB,gDA8DNC,E,kDAnDX,aAAe,IAAD,8BACV,gBALJC,MAAQ,CACJC,QAAS,GACTC,aAAc,IAEJ,EAIdC,WAAa,WACTR,EAAOS,WAAW,CACdC,aAAc,SACdC,MAAO,EAAKN,MAAME,eAErBK,MAAK,SAACC,GACH,EAAKC,SAAS,CAACR,QAASO,EAASE,QACjCnC,QAAQC,IAAI,EAAKwB,MAAMC,YAE1BU,OAAM,SAACC,GACNrC,QAAQC,IAAI,yCACZD,QAAQqC,MAAMA,OAfN,EAkBdC,oBAAsB,SAACC,GACnBvC,QAAQC,IAAI,qBAAuBsC,EAAMpB,OAAOqB,OAC5CD,EAAMpB,OAAOqB,MACb,EAAKN,SAAS,CAACP,aAAcY,EAAMpB,OAAOqB,QAE1C,EAAKN,SAAS,CAACP,aAAc,KAEjC,EAAKC,cAvBL,EAAKA,aAFK,E,qDA4BV,OACI,6BACMa,KAAKhB,MAAMC,QACT,6BACI,kBAACgB,EAAA,EAAD,CAAWrC,MAAO,CAACsC,QAAS,IACxBC,GAAG,cACHC,YAAY,SACZC,OAAO,SACPC,SAAUN,KAAKH,sBAEnB,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG7C,MAAO,CAACsC,QAAS,KACvCF,KAAKhB,MAAMC,QAAQyB,KAAI,SAAAC,GAAa,OAClC,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACjC,kBAAC,EAAD,CAAQvD,OAAQkD,UAKhC,wB,GAnDMM,aCEXC,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMsC,a","file":"static/js/main.120a58be.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" color=\"inherit\">\r\n                React App Test\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst Course = (props) => {\r\n    console.log(props)\r\n    return(\r\n        <div>\r\n            { props.course ? (\r\n                <Card >\r\n                    <CardMedia style={{height: 0, paddingTop: '0%'}}\r\n                    // image={props.course.fields.courseImage.fields.file.url}\r\n                    title={props.course.fields.title}\r\n                    />\r\n                    <CardContent>\r\n                    <Typography gutterBottom variant=\"headline\" component=\"h2\">\r\n                        {props.course.fields.title}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        {props.course.fields.description}\r\n                    </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                    <Button size=\"small\" color=\"primary\" href={props.course.fields.url} target=\"_blank\">\r\n                        Go To Post\r\n                    </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Course","import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as contentful from 'contentful'\r\nimport Course from '../components/Course'\r\n\r\nconst SPACE_ID = 'icwhdcov94og'\r\nconst ACCESS_TOKEN = '0xJY6veNm44TvAVQ5u9B1k0eFq6ot7n0IUqHv5EszX0'\r\nconst client = contentful.createClient({\r\n    space: SPACE_ID,\r\n    accessToken: ACCESS_TOKEN\r\n})\r\n\r\nclass CoursesList extends Component {\r\n    state = {\r\n        courses: [],\r\n        searchString: ''\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.getCourses()\r\n    }\r\n    getCourses = () => {\r\n        client.getEntries({\r\n            content_type: 'course',\r\n            query: this.state.searchString\r\n        })\r\n        .then((response) => {\r\n            this.setState({courses: response.items})\r\n            console.log(this.state.courses)\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occurred while fetching Entries\")\r\n          console.error(error)\r\n        })\r\n    }\r\n    onSearchInputChange = (event) => {\r\n        console.log(\"Search changed ...\" + event.target.value)\r\n        if (event.target.value) {\r\n            this.setState({searchString: event.target.value})\r\n        } else {\r\n            this.setState({searchString: ''})\r\n        }\r\n        this.getCourses()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.courses ? (\r\n                    <div>\r\n                        <TextField style={{padding: 24}}\r\n                            id=\"searchInput\"\r\n                            placeholder=\"Search\"   \r\n                            margin=\"normal\"\r\n                            onChange={this.onSearchInputChange}\r\n                            />\r\n                        <Grid container spacing={4} style={{padding: 24}}>\r\n                            { this.state.courses.map(currentCourse => (\r\n                                <Grid item xs={12} sm={6} lg={4} xl={3}>\r\n                                    <Course course={currentCourse} />\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </div>\r\n                ) : \"No courses found\" }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CoursesList;","import React, { Component } from 'react'\r\nimport NavBar from './components/NavBar'\r\nimport CoursesList from './components/CourseList'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <CoursesList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}